
// function playerStart () {
//   //Update boardState
//   let boardKey = `b${zelda.row}${zelda.col}`
//   //console.log(boardKey)
//   boardState[boardKey].objectOnLoc = zelda
//   //console.log(boardState[boardKey])
//   //Update HTML
//   document.getElementById(`${zelda.row}${zelda.col}`).innerHTML = zelda.nam
// }

// function monsterStart () {
//   //Update boardState
//   let boardKey = `b${monster1.row}${monster1.col}`
//   //console.log(boardKey)
//   boardState[boardKey].objectOnLoc = monster1
//   //console.log(boardState[boardKey]) 
//   //Update HTML
//    document.getElementById(`${monster1.row}${monster1.col}`).innerHTML = monster1.nam
// }

  //  //Set player combat attack to monster health or max player attack, whichever is lower; set attacker and defender combat values
  // let playerCombatAttack
  // let aCombatAttack
  // let dCombatAttack

  // if (attacker.typ == `player`) {
  //   dInitialLif < attacker.atk ? playerCombatAttack = dInitialLif : playerCombatAttack = attacker.atk
  //   aCombatAttack = playerCombatAttack
  //   dCombatAttack = defender.atk
  // } else {
  //   attacker.lif < defender.atk ? playerCombatAttack = attacker.lif : playerCombatAttack = defender.atk
  //   dCombatAttack = playerCombatAttack
  //   aCombatAttack = attacker.atk
  // }


        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        column-gap: 3px;
        row-gap: 3px;
        align-items: center;
        justify-items: center;

<img class="game-board-pic" src="/Assets/TLoZ_Princess_Zelda_Sprite.png">


9/25 Standup Notes
So far...
- Built out gameboard
- Built out logic to have player move every turn (single space, within boarders) 
- Built out logic to have monster move every other turn (single space, within boarders) 
- Used API to create "databases" of

9/26 Standup Notes...
- Issues
    - Git sync - forking issues, don't want to lose work
    - How do you run an async function completely before the rest of the code runs?
- For today
    - Finalize/test V1 game logic, gameplay via console
    - Create initial UI, including title, gameboard, turn status, player stats, and new game button
- Remainder of the week
    - CSS cleanup
    - V2+ time permitting

9/27 Standup Notes
- For today 
    - (1 hour, time boxed) Grid layers on character icons/stats
    - Code and CSS for messages/status box
    - game over function and screen popup
    - (stretch) new game function and screen popup
- Remainder of the week
    - CSS cleanup
    - V2+ time permitting




# R1 Prototype
- Grid - 6x6
- Single/fixed-stats objects
  - Monster (1 atk, 2 health)
  - Sword (2 atk)
  - Player (0 atk, 3 health)
- Game Data
  - Player
    - Attack
    - Health
  - Weapon
    - Attack
  - Monster
    - Attack
    - Health
- Mechanics
  - Movement
  - Combat (including multi-combat)
  - Turn Count
- QA/Success Criteria
  - Valid turn order - Player -> Monster
  - Valid movement - Player
    - Player moves from keyboard/mouse
    - Cannot exit grid
    - Movement limited to one square up/down/left/right
  - Valid movement - Monster
    - Random Movement
    - Cannot exit grid
    - Movement limited to one square up/down/left/right
  - Player moves to sword location
    - Sword Disappears
    - Player Attack Stats are increased by sword attack value
  - Valid Combat
    - Attacker initiates
    - Combat repeats until character health is <1

# R2 Additional Mechanics
- Single/fixed stats objects
  - Shield
  - Food
  - Fairy
  - Treasure
  - Heart Container
- Mechanics
  - Shield Consume/Break
  - Food consume/health increase
  - Heart consume/ increase health container count

# R3 
  - 